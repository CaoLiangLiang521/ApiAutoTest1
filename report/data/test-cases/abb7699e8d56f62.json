{"uid":"abb7699e8d56f62","name":"test_login[getData0]","fullName":"testcase.test_login.TestLogin#test_login","historyId":"7d2cf2a0e4136eba74036c42b657c468","time":{"start":1681132031362,"stop":1681132031469,"duration":107},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x10d6bafe0>\ngetData = {'data': {'userName': 'admin', 'userPassword': 'dolphinscheduler123'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('login')\n    def test_login(self,getData):\n        #发送请求\n        result  = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],\n                     json=getData['json'],headers=getData['headers'],)\n    \n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n../testcase/test_login.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <util.requestUtil.RquestUtll object at 0x10d65c1f0>\nresult = <Response [200]>, statusCode = '200', errorCode = '0', msg = '登陆成功'\n\n    def assertResult(self,result,statusCode,errorCode,msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str('statusCode'),'预期响应状态码')\n            allure.attach(str('errorCode'), '预期响应错误码')\n            allure.attach(str('msg'), '预期返回到错误信息 ')\n>           assert result.status_code == statusCode\nE           AssertionError\n\n../util/requestUtil.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"getData","time":{"start":1681132031362,"stop":1681132031362,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x10d6bafe0>\ngetData = {'data': {'userName': 'admin', 'userPassword': 'dolphinscheduler123'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('login')\n    def test_login(self,getData):\n        #发送请求\n        result  = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],\n                     json=getData['json'],headers=getData['headers'],)\n    \n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n../testcase/test_login.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <util.requestUtil.RquestUtll object at 0x10d65c1f0>\nresult = <Response [200]>, statusCode = '200', errorCode = '0', msg = '登陆成功'\n\n    def assertResult(self,result,statusCode,errorCode,msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str('statusCode'),'预期响应状态码')\n            allure.attach(str('errorCode'), '预期响应错误码')\n            allure.attach(str('msg'), '预期返回到错误信息 ')\n>           assert result.status_code == statusCode\nE           AssertionError\n\n../util/requestUtil.py:55: AssertionError","steps":[{"name":"发送请求","time":{"start":1681132031465,"stop":1681132031467,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"d278ed18e6d75b4","name":"请求路径","source":"d278ed18e6d75b4.attach","type":"text/plain","size":56},{"uid":"2fbf402f33cbb773","name":"请求方式","source":"2fbf402f33cbb773.attach","type":"text/plain","size":4},{"uid":"c592f322b3d56ef7","name":"请求头","source":"c592f322b3d56ef7.attach","type":"text/plain","size":198},{"uid":"cbc33805638ab5a9","name":"请求体","source":"cbc33805638ab5a9.attach","type":"text/plain","size":47}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"获取响应","time":{"start":1681132031467,"stop":1681132031468,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"d6e77dd12cab547","name":"响应状态码","source":"d6e77dd12cab547.attach","type":"text/plain","size":3},{"uid":"8f1308683b1ba7c2","name":"响应头","source":"8f1308683b1ba7c2.attach","type":"text/plain","size":432},{"uid":"30fdf153fda5d00e","name":"响应文本内容","source":"30fdf153fda5d00e.attach","type":"text/plain","size":154}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false},{"name":"断言","time":{"start":1681132031468,"stop":1681132031469,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/Users/aliang/PycharmProjects/pythonProject/ApiAutoTest/util/requestUtil.py\", line 55, in assertResult\n    assert result.status_code == statusCode\n","steps":[],"attachments":[{"uid":"7a519bd7c1332b2","name":"预期响应状态码","source":"7a519bd7c1332b2.attach","type":"text/plain","size":10},{"uid":"7b983530d857dbfa","name":"预期响应错误码","source":"7b983530d857dbfa.attach","type":"text/plain","size":9},{"uid":"e3ab618cec89d595","name":"预期返回到错误信息 ","source":"e3ab618cec89d595.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":10,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"story","value":"login"},{"name":"feature","value":"登陆模块"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"aliangdeMBP"},{"name":"thread","value":"12699-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"getData","value":"{'name': 'login', 'method': 'POST', 'url': 'http://www.xuxuclassmate.cn:12345/dolphinscheduler/login', 'headers': None, 'params': None, 'data': {'userName': 'admin', 'userPassword': 'dolphinscheduler123'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '0', 'msg': '登陆成功'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"abb7699e8d56f62.json","parameterValues":["{'name': 'login', 'method': 'POST', 'url': 'http://www.xuxuclassmate.cn:12345/dolphinscheduler/login', 'headers': None, 'params': None, 'data': {'userName': 'admin', 'userPassword': 'dolphinscheduler123'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '0', 'msg': '登陆成功'}}"]}