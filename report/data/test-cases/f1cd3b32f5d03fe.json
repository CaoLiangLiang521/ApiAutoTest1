{"uid":"f1cd3b32f5d03fe","name":"test_login[getData2]","fullName":"testcase.test_login.TestLogin#test_login","historyId":"fc6c4e40fdec3e4e168899855d4ea63e","time":{"start":1681134151679,"stop":1681134151776,"duration":97},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x106f1e440>\ngetData = {'data': {'userName': 'admin', 'userPassword': 'dolphinscheduler123'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('login')\n    def test_login(self,getData):\n        #发送请求\n        result  = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],\n                     json=getData['json'],headers=getData['headers'],)\n    \n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n../testcase/test_login.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <util.requestUtil.RquestUtll object at 0x106eb8340>\nresult = <Response [200]>, statusCode = '200', errorCode = '0', msg = '登陆成功'\n\n    def assertResult(self,result,statusCode,errorCode,msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str('statusCode'),'预期响应状态码')\n            allure.attach(str('errorCode'), '预期响应错误码')\n            allure.attach(str('msg'), '预期返回到错误信息 ')\n>           assert result.status_code == statusCode\nE           AssertionError\n\n../util/requestUtil.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"getData","time":{"start":1681134151678,"stop":1681134151679,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x106f1e440>\ngetData = {'data': {'userName': 'admin', 'userPassword': 'dolphinscheduler123'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('login')\n    def test_login(self,getData):\n        #发送请求\n        result  = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],\n                     json=getData['json'],headers=getData['headers'],)\n    \n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n../testcase/test_login.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <util.requestUtil.RquestUtll object at 0x106eb8340>\nresult = <Response [200]>, statusCode = '200', errorCode = '0', msg = '登陆成功'\n\n    def assertResult(self,result,statusCode,errorCode,msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str('statusCode'),'预期响应状态码')\n            allure.attach(str('errorCode'), '预期响应错误码')\n            allure.attach(str('msg'), '预期返回到错误信息 ')\n>           assert result.status_code == statusCode\nE           AssertionError\n\n../util/requestUtil.py:55: AssertionError","steps":[{"name":"发送请求","time":{"start":1681134151770,"stop":1681134151772,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"b0711e75b57f61ce","name":"请求路径","source":"b0711e75b57f61ce.attach","type":"text/plain","size":56},{"uid":"2647b95b86fd6063","name":"请求方式","source":"2647b95b86fd6063.attach","type":"text/plain","size":4},{"uid":"19184481105b3221","name":"请求头","source":"19184481105b3221.attach","type":"text/plain","size":198},{"uid":"124beb18678a9d31","name":"请求体","source":"124beb18678a9d31.attach","type":"text/plain","size":47}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"获取响应","time":{"start":1681134151772,"stop":1681134151774,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"b0b3f289cffc1dfa","name":"响应状态码","source":"b0b3f289cffc1dfa.attach","type":"text/plain","size":3},{"uid":"80b3e2b831357cf5","name":"响应头","source":"80b3e2b831357cf5.attach","type":"text/plain","size":432},{"uid":"997d46ff24e1de25","name":"响应文本内容","source":"997d46ff24e1de25.attach","type":"text/plain","size":154}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false},{"name":"断言","time":{"start":1681134151774,"stop":1681134151775,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/Users/aliang/PycharmProjects/pythonProject/ApiAutoTest/util/requestUtil.py\", line 55, in assertResult\n    assert result.status_code == statusCode\n","steps":[],"attachments":[{"uid":"4d338d1d3479f7a2","name":"预期响应状态码","source":"4d338d1d3479f7a2.attach","type":"text/plain","size":10},{"uid":"a8cecea33eb06f1d","name":"预期响应错误码","source":"a8cecea33eb06f1d.attach","type":"text/plain","size":9},{"uid":"a0cf3bcca9d37186","name":"预期返回到错误信息 ","source":"a0cf3bcca9d37186.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":10,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"登陆模块"},{"name":"story","value":"login"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"aliangdeMBP"},{"name":"thread","value":"13490-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"getData","value":"{'name': 'login', 'method': 'POST', 'url': 'http://www.xuxuclassmate.cn:12345/dolphinscheduler/login', 'headers': None, 'params': None, 'data': {'userName': 'admin', 'userPassword': 'dolphinscheduler123'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '0', 'msg': '登陆成功'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f1cd3b32f5d03fe.json","parameterValues":["{'name': 'login', 'method': 'POST', 'url': 'http://www.xuxuclassmate.cn:12345/dolphinscheduler/login', 'headers': None, 'params': None, 'data': {'userName': 'admin', 'userPassword': 'dolphinscheduler123'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '0', 'msg': '登陆成功'}}"]}