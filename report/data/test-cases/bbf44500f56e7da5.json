{"uid":"bbf44500f56e7da5","name":"test_login[getData1]","fullName":"testcase.test_login.TestLogin#test_login","historyId":"5a846e694ee41af589c8a9dee72c1324","time":{"start":1681134151586,"stop":1681134151668,"duration":82},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x106f1e410>\ngetData = {'data': {'userName': 'admin', 'userPassword': 'sdsdsds'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('login')\n    def test_login(self,getData):\n        #发送请求\n        result  = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],\n                     json=getData['json'],headers=getData['headers'],)\n    \n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n../testcase/test_login.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <util.requestUtil.RquestUtll object at 0x106eb8340>\nresult = <Response [200]>, statusCode = '200', errorCode = '10013'\nmsg = '用户名或者密码错误'\n\n    def assertResult(self,result,statusCode,errorCode,msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str('statusCode'),'预期响应状态码')\n            allure.attach(str('errorCode'), '预期响应错误码')\n            allure.attach(str('msg'), '预期返回到错误信息 ')\n>           assert result.status_code == statusCode\nE           AssertionError\n\n../util/requestUtil.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"getData","time":{"start":1681134151585,"stop":1681134151585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x106f1e410>\ngetData = {'data': {'userName': 'admin', 'userPassword': 'sdsdsds'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('login')\n    def test_login(self,getData):\n        #发送请求\n        result  = ru.doRequest(method=getData['method'],url=getData['url'],params=getData['params'],data=getData['data'],\n                     json=getData['json'],headers=getData['headers'],)\n    \n    \n>       ru.assertResult(result,getData['validate']['statusCode'],getData['validate']['errorCode'],getData['validate']['msg'])\n\n../testcase/test_login.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <util.requestUtil.RquestUtll object at 0x106eb8340>\nresult = <Response [200]>, statusCode = '200', errorCode = '10013'\nmsg = '用户名或者密码错误'\n\n    def assertResult(self,result,statusCode,errorCode,msg):\n        with allure.step('发送请求'):\n            allure.attach(str(result.request.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code),'响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本内容')\n    \n        with allure.step('断言'):\n            allure.attach(str('statusCode'),'预期响应状态码')\n            allure.attach(str('errorCode'), '预期响应错误码')\n            allure.attach(str('msg'), '预期返回到错误信息 ')\n>           assert result.status_code == statusCode\nE           AssertionError\n\n../util/requestUtil.py:55: AssertionError","steps":[{"name":"发送请求","time":{"start":1681134151664,"stop":1681134151665,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"ba3bbf8c3ba76567","name":"请求路径","source":"ba3bbf8c3ba76567.attach","type":"text/plain","size":56},{"uid":"97ebb5706a936e11","name":"请求方式","source":"97ebb5706a936e11.attach","type":"text/plain","size":4},{"uid":"5772c839146dd1f3","name":"请求头","source":"5772c839146dd1f3.attach","type":"text/plain","size":198},{"uid":"9b2939e9cc2b2602","name":"请求体","source":"9b2939e9cc2b2602.attach","type":"text/plain","size":35}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"获取响应","time":{"start":1681134151665,"stop":1681134151666,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"a66eec5108a81d36","name":"响应状态码","source":"a66eec5108a81d36.attach","type":"text/plain","size":3},{"uid":"7b7a404aa8113659","name":"响应头","source":"7b7a404aa8113659.attach","type":"text/plain","size":275},{"uid":"84625988ad78d58c","name":"响应文本内容","source":"84625988ad78d58c.attach","type":"text/plain","size":92}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false},{"name":"断言","time":{"start":1681134151666,"stop":1681134151667,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/Users/aliang/PycharmProjects/pythonProject/ApiAutoTest/util/requestUtil.py\", line 55, in assertResult\n    assert result.status_code == statusCode\n","steps":[],"attachments":[{"uid":"426528668cdb005e","name":"预期响应状态码","source":"426528668cdb005e.attach","type":"text/plain","size":10},{"uid":"8e352d4a587c1c0","name":"预期响应错误码","source":"8e352d4a587c1c0.attach","type":"text/plain","size":9},{"uid":"e18e88c96994d98a","name":"预期返回到错误信息 ","source":"e18e88c96994d98a.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":10,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"登陆模块"},{"name":"story","value":"login"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"aliangdeMBP"},{"name":"thread","value":"13490-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"getData","value":"{'name': 'login', 'method': 'POST', 'url': 'http://www.xuxuclassmate.cn:12345/dolphinscheduler/login', 'headers': None, 'params': None, 'data': {'userName': 'admin', 'userPassword': 'sdsdsds'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '10013', 'msg': '用户名或者密码错误'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"bbf44500f56e7da5.json","parameterValues":["{'name': 'login', 'method': 'POST', 'url': 'http://www.xuxuclassmate.cn:12345/dolphinscheduler/login', 'headers': None, 'params': None, 'data': {'userName': 'admin', 'userPassword': 'sdsdsds'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '10013', 'msg': '用户名或者密码错误'}}"]}